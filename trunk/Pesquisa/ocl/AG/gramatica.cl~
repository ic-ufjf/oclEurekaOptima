

int Decodifica(t_regra Gramatica[], int fenotipo[], __local t_item_programa * programa){

	int m, fenotipo_ctr = 0;

	/* Inicializa o programa com o símbolo inicial */

	char elementoInicial[8] = "<expr>";

	type_simbolo inicial;// = GetSimboloParser(elementoInicial);
	programa[0].t.v[0] = inicial.v[0];
	programa[0].t.v[1] = inicial.v[1];
	programa[0].proximo = FIM_PROGRAMA;

	int program_ctr=1;

	fenotipo_ctr = 0;

	//Mapeamento
	while(1){

		/* Verifica se todo o genótipo foi utilizado */
		if(fenotipo_ctr == D_FENOTIPO-1){
			break;
		}

		/* Procura primeiro não terminal à esquerda */
		int i=0;

		while((int)programa[i].t.v[0] != NAOTERMINAL) {

			i++;
			/* Verifica se há somente terminais */
			if(i == program_ctr) break;
		}

		/* Verifica se há somente terminais */
		if(i == program_ctr) break;

		int idRegra = GetRegra(Gramatica, programa[i].t);

		int opcao = fenotipo[fenotipo_ctr++] % Gramatica[idRegra].num_escolhas;

		int proximoAnterior = programa[i].proximo;

		/* Substitui pelo primeiro simbolo */

		type_simbolo auxs = Gramatica[idRegra].escolhas[opcao].simbolos[0];
		programa[i].t.v[0] = auxs.v[0];
		programa[i].t.v[1] = auxs.v[1];

		if(Gramatica[idRegra].escolhas[opcao].num_simbolos>1){

			programa[i].proximo = program_ctr;

			for(m=1;m < Gramatica[idRegra].escolhas[opcao].num_simbolos;m++){

				programa[program_ctr].t = Gramatica[idRegra].escolhas[opcao].simbolos[m];
				programa[program_ctr].proximo = program_ctr+1;

				program_ctr++;
			}

			programa[program_ctr-1].proximo = proximoAnterior;
		}
		
	}

	return program_ctr;
}
