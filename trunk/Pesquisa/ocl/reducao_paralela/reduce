
__kernel void reduce(__global int* buffer,
            __local int* scratch,
            __const int length,
            __global int* result) {

  int global_index = get_global_id(0);

  int accumulator = 0;
  // Loop sequencial sobre os workgroups
  while (global_index < length) {
    int element = buffer[global_index];
    accumulator = accumulator + element;
    global_index += get_global_size(0);
  }

  int local_index = get_local_id(0);
  scratch[local_index] = accumulator;
  barrier(CLK_LOCAL_MEM_FENCE);

  //Redução paralela
  for(int offset = get_local_size(0) / 2;
      offset > 0;
      offset = offset / 2) {

    barrier(CLK_LOCAL_MEM_FENCE);

    if (local_index < offset) {
      int other = scratch[local_index + offset];
      int mine  = scratch[local_index];
      scratch[local_index] = mine + other;
    }    
  }

  if (local_index == 0) {
    result[get_group_id(0)] = scratch[0];
  }

}
