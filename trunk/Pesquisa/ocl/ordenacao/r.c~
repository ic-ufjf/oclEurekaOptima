
typedef struct{

    short genotipo[TAMANHO_INDIVIDUO];
    int aptidao;

} individuo;


typedef individuo T;
#define getKey(x) (x.aptidao)
#define getValue(x) (x.aptidao)
#define makeData(k,v) (k)
#endif

#define IS_FLOATING_POINT 1

#define K2 (1 << K)
#define RADIX_MASK ((((T)(1)) << K) - 1)
#define SIGN_BIT ((sizeof(T) * CHAR_BIT) - 1)

inline uint radix(const T x, const uint low_bit)
{
#if defined(IS_FLOATING_POINT)
    const uint mask = -(x.aptidao >> SIGN_BIT) | (((T)(1)) << SIGN_BIT);
    return ((x.aptidao ^ mask) >> low_bit) & RADIX_MASK;
#elif defined(IS_SIGNED)
    return ((x.aptidao ^ (((T)(1)) << SIGN_BIT)) >> low_bit) & RADIX_MASK;
#else
    return (x.aptidao >> low_bit) & RADIX_MASK;
#endif
}

__kernel void count(__global const T *input,
                    const uint input_size,
                    __global uint *global_counts,
                    __global uint *global_offsets,
                    __local uint *local_counts,
                    const uint low_bit)
{
     // work-item parameters
    const uint gid = get_global_id(0);
    const uint lid = get_local_id(0);
	
     // zero local counts
    if(lid < K2){
        local_counts[lid] = 0;
    }
    barrier(CLK_LOCAL_MEM_FENCE);

     // reduce local counts
    if(gid < input_size){
        T value = input[gid];
        uint bucket = radix(value, low_bit);
        atomic_inc(local_counts + bucket);
    }
    barrier(CLK_LOCAL_MEM_FENCE);

     // write block-relative offsets
    if(lid < K2){
        global_counts[K2*get_group_id(0) + lid] = local_counts[lid];

         // write global offsets
        if(get_group_id(0) == (get_num_groups(0) - 1)){
            global_offsets[lid] = local_counts[lid];
        }
    }
}

__kernel void scan(__global const uint *block_offsets,
                   __global uint *global_offsets,
                   const uint block_count)
{
    __global const uint *last_block_offsets =
        block_offsets + K2 * (block_count - 1);

     // calculate and scan global_offsets
    uint sum = 0;
    for(uint i = 0; i < K2; i++){
        uint x = global_offsets[i] + last_block_offsets[i];
        global_offsets[i] = sum;
        sum += x;
    }
}

__kernel void scatter(__global const T *input,
                      const uint input_size,
                      const uint low_bit,
                      __global const uint *counts,
                      __global const uint *global_offsets,
                      __global T *output)
{
     // work-item parameters
    const uint gid = get_global_id(0);
    const uint lid = get_local_id(0);

     // copy input to local memory
    T value;
    uint bucket;
    __local uint local_input[BLOCK_SIZE];
    if(gid < input_size){
        value = input[gid];
        bucket = radix(value, low_bit);
        local_input[lid] = bucket;
    }

     // copy block counts to local memory
    __local uint local_counts[(1 << K)];
    if(lid < K2){
        local_counts[lid] = counts[get_group_id(0) * K2 + lid];
    }

     // wait until local memory is ready
    barrier(CLK_LOCAL_MEM_FENCE);

    if(gid >= input_size){
        return;
    }\n"

     // get global offset
    uint offset = global_offsets[bucket] + local_counts[bucket];

     // calculate local offset
    uint local_offset = 0;
    for(uint i = 0; i < lid; i++){
        if(local_input[i] == bucket)
            local_offset++;
    }

     // write value to output
    output[offset + local_offset] = value;
}
