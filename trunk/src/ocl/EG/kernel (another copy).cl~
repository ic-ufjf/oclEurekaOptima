#include "representacao.h"
#include "substituicao.cl"
#include "utils.cl"

void obtem_fenotipo_individuo(short gray[], short fenotipo[]){

    int i, j=0;

    gray_para_binario(gray, fenotipo);
   
    for(i=0; i<DIMENSOES_PROBLEMA; i++, j+=TAMANHO_VALOR){

       fenotipo[i] = binario_para_decimal(fenotipo, j, j+TAMANHO_VALOR);
    }
}

long funcao_de_avaliacao(individuo p, short fenotipo[]){    

    obtem_fenotipo_individuo(p.genotipo, fenotipo);

    long soma = 0;

    int i;

    for(i=0;i < DIMENSOES_PROBLEMA; i++){
        soma += (long)pow((float)fenotipo[i], 2);
    }

    return soma*(-1);
}


int torneio(__global individuo *populacao, int indice_participante, cburng4x32 *rng) {	

    int vencedor = indice_participante % TAMANHO_POPULACAO;
    int i=0; int aleatorio = 0;

    while(i < TAMANHO_TORNEIO) {	
	
 	aleatorio = abs(rand(rng) % (TAMANHO_POPULACAO));
	
        if(populacao[aleatorio].aptidao > populacao[vencedor].aptidao){
            vencedor = aleatorio;
        }

        i++;
    }

    return vencedor;
}

void crossover_um_ponto(individuo *pais, individuo *filhos, cburng4x32 *rng){

    //Gera número entre 0 e TAMANHO_INDIVIDUO-1
    int ponto = rand(rng) % TAMANHO_INDIVIDUO;

     for (int i = 0; i < TAMANHO_INDIVIDUO; i++) {
	 int part = (i < ponto) ? 1 : 0;
	 filhos [0].genotipo[i] = pais [part].genotipo [i];
	 filhos [1].genotipo[i] = pais [1 - part].genotipo [i];
    }
}

void recombinacao(individuo *pais, individuo *filhos, float chance, cburng4x32 *rng){

    //gera um número entre 0 e 1
    float aleatorio = u_rand(rng);

    if (aleatorio<chance) {
        crossover_um_ponto(pais, filhos, rng);
    }
    else{

       filhos[0] = pais[0];
       filhos[1] = pais[1];
    }
}


void mutacao(individuo *p, float chance, cburng4x32 *rng){

    for(int i=0;i<TAMANHO_INDIVIDUO;i++) {
	
        //gera um número entre 0 e 1
        float aleatorio = u_rand(rng);

        if (aleatorio<chance) {
           p->genotipo[i] = (p->genotipo[i]+1) % 2;
        }
    }
}

__kernel void inicializa_populacao(__global individuo *pop){  
    
    int tid = get_global_id(0), 
        lid = get_local_id(0);

    int seed = tid;    

    //Inicializa RNG
    cburng4x32 rng;
    cburng4x32_init(&rng);
    rng.key.v[0] = seed;
    rng.ctr.v[0] = 0;

    for(int j=0; j < TAMANHO_INDIVIDUO; j++){
        pop[tid].genotipo[j] =  rand(&rng) % 2;           
    }

    __private short fenotipo[DIMENSOES_PROBLEMA];

    pop[tid].aptidao = funcao_de_avaliacao(pop[tid], fenotipo);    
}


__kernel void iteracao(__global individuo *pop, 
			const int geracao, 
			int fixed_seed, 
			__global individuo *newPop,
			__global struct r123array4x32 *counter)
{    

    int tid  = get_global_id(0)*2, 
        lid  = get_local_id(0),
	seed = fixed_seed + tid;


    //Inicializa RNG  
    cburng4x32 rng;
    cburng4x32_init(&rng);
    rng.key.v[0] = seed;
    rng.ctr = counter[tid];
    //rng.ctr.v[0] = tid;

    /*
	Seleção
    */

    individuo pais[2], filhos[2];
 	
    /* int indicesPais[2];

indicesPais[0] = torneio(pop, tid, &rng);
indicesPais[1] = torneio(pop, tid+1, &rng); */

    pais[0] = pop[torneio(pop, tid, &rng)];
    pais[1] = pop[torneio(pop, tid+1, &rng)];



//newPop[tid] = pais[0];
//newPop[tid+1] = pais[1];

//newPop[tid].aptidao =   rand(&rng) % TAMANHO_INDIVIDUO ;
//newPop[tid+1].aptidao = rand(&rng) % TAMANHO_INDIVIDUO ;

   /*

for(int i=0; i< TAMANHO_INDIVIDUO;i++){
    newPop[tid].genotipo[i]   = pais[0].genotipo[i];
    newPop[tid+1].genotipo[i] = pais[1].genotipo[i];
}
	
   */ 	


    /*
	Recombinação
    */ 	

 
    recombinacao(pais, filhos, TAXA_DE_RECOMBINACAO, &rng);	
  
    /*
	Mutação
    */
	
    mutacao(&filhos[0], TAXA_DE_MUTACAO, &rng);
    mutacao(&filhos[1], TAXA_DE_MUTACAO, &rng);
	
    /*
       Avaliação
   */

    __private short fenotipo[TAMANHO_INDIVIDUO];

    filhos[0].aptidao = funcao_de_avaliacao(filhos[0], fenotipo);
    filhos[1].aptidao = funcao_de_avaliacao(filhos[1], fenotipo);
    
		
    newPop[tid]   = filhos[0];
    newPop[tid+1] = filhos[1]; 

    counter[tid] = rng.ctr;

}
