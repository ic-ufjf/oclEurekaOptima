Iteração 0, limites = 0 até 200
#define DIMENSOES_PROBLEMA 128
#define TAMANHO_POPULACAO 500
#define TAMANHO_VALOR 8
#define TAMANHO_INDIVIDUO DIMENSOES_PROBLEMA*TAMANHO_VALOR  
#define TAMANHO_DATABASE 100
#define NUM_VARIAVEIS 2
#define DATABASE(row,column) dataBase[(column)*TAMANHO_DATABASE + row] 
void reducao_paralela( __global float * fitness, __local float  * erros, uint gid, uint lid, const int offset);
#define LOCAL_SIZE_ROUNDED_UP_TO_POWER_OF_2 128 
 #define x1 (DATABASE(line, 0)) 

__kernel void programa0( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 0);      
}


__kernel void programa1( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f * ( 1.000000f - 1.000000f ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 1);      
}


__kernel void programa2( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 2);      
}


__kernel void programa3( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 3);      
}


__kernel void programa4( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 4);      
}


__kernel void programa5( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 5);      
}


__kernel void programa6( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 6);      
}


__kernel void programa7( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( ( x1 / x1 ) / ( x1 * ( x1 * ( ( x1 / 1.000000f ) + x1 ) ) ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 7);      
}


__kernel void programa8( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 8);      
}


__kernel void programa9( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 9);      
}


__kernel void programa10( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f + x1 ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 10);      
}


__kernel void programa11( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 11);      
}


__kernel void programa12( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( ( 1.000000f * ( ( x1 + 1.000000f ) * ( 1.000000f / 1.000000f ) ) ) / 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 12);      
}


__kernel void programa13( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 13);      
}


__kernel void programa14( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 * x1 ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 14);      
}


__kernel void programa15( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 15);      
}


__kernel void programa16( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 * x1 ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 16);      
}


__kernel void programa17( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f - x1 ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 17);      
}


__kernel void programa18( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( ( x1 * ( 1.000000f + ( x1 / x1 ) ) ) / ( ( x1 - 1.000000f ) - 1.000000f ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 18);      
}


__kernel void programa19( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 19);      
}


__kernel void programa20( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 20);      
}


__kernel void programa21( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 21);      
}


__kernel void programa22( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 22);      
}


__kernel void programa23( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 23);      
}


__kernel void programa24( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f / 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 24);      
}


__kernel void programa25( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 25);      
}


__kernel void programa26( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 26);      
}


__kernel void programa27( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f + ( x1 - ( x1 / 1.000000f ) ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 27);      
}


__kernel void programa28( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f / x1 ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 28);      
}


__kernel void programa29( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 / x1 ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 29);      
}


__kernel void programa30( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 30);      
}


__kernel void programa31( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 31);      
}


__kernel void programa32( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 32);      
}


__kernel void programa33( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f + 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 33);      
}


__kernel void programa34( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 34);      
}


__kernel void programa35( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 35);      
}


__kernel void programa36( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 36);      
}


__kernel void programa37( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 37);      
}


__kernel void programa38( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 38);      
}


__kernel void programa39( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 39);      
}


__kernel void programa40( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 40);      
}


__kernel void programa41( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 41);      
}


__kernel void programa42( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 42);      
}


__kernel void programa43( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 43);      
}


__kernel void programa44( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 44);      
}


__kernel void programa45( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 45);      
}


__kernel void programa46( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 46);      
}


__kernel void programa47( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 + 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 47);      
}


__kernel void programa48( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 48);      
}


__kernel void programa49( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f / 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 49);      
}


__kernel void programa50( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 50);      
}


__kernel void programa51( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 51);      
}


__kernel void programa52( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 52);      
}


__kernel void programa53( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 53);      
}


__kernel void programa54( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 * ( 1.000000f - ( ( 1.000000f / x1 ) - 1.000000f ) ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 54);      
}


__kernel void programa55( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 55);      
}


__kernel void programa56( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f + x1 ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 56);      
}


__kernel void programa57( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 - ( x1 * x1 ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 57);      
}


__kernel void programa58( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 58);      
}


__kernel void programa59( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 59);      
}


__kernel void programa60( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 60);      
}


__kernel void programa61( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 61);      
}


__kernel void programa62( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 62);      
}


__kernel void programa63( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 63);      
}


__kernel void programa64( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 64);      
}


__kernel void programa65( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 / ( ( ( 1.000000f * x1 ) / 1.000000f ) - ( ( ( 1.000000f * ( ( ( 1.000000f - ( x1 - x1 ) ) + x1 ) / ( ( ( x1 + 1.000000f ) / ( ( 1.000000f * 1.000000f ) - x1 ) ) / x1 ) ) ) / 1.000000f ) - x1 ) ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 65);      
}


__kernel void programa66( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 66);      
}


__kernel void programa67( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 67);      
}


__kernel void programa68( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 + x1 ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 68);      
}


__kernel void programa69( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 69);      
}


__kernel void programa70( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 70);      
}


__kernel void programa71( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 71);      
}


__kernel void programa72( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 * 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 72);      
}


__kernel void programa73( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 73);      
}


__kernel void programa74( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 74);      
}


__kernel void programa75( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 75);      
}


__kernel void programa76( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 76);      
}


__kernel void programa77( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 77);      
}


__kernel void programa78( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 78);      
}


__kernel void programa79( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 - ( x1 + x1 ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 79);      
}


__kernel void programa80( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 80);      
}


__kernel void programa81( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 81);      
}


__kernel void programa82( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 82);      
}


__kernel void programa83( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 + ( x1 - x1 ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 83);      
}


__kernel void programa84( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 84);      
}


__kernel void programa85( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 85);      
}


__kernel void programa86( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 86);      
}


__kernel void programa87( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 87);      
}


__kernel void programa88( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 88);      
}


__kernel void programa89( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 89);      
}


__kernel void programa90( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 90);      
}


__kernel void programa91( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 91);      
}


__kernel void programa92( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 * ( x1 - ( 1.000000f + 1.000000f ) ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 92);      
}


__kernel void programa93( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 93);      
}


__kernel void programa94( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 94);      
}


__kernel void programa95( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 95);      
}


__kernel void programa96( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 - x1 ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 96);      
}


__kernel void programa97( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 97);      
}


__kernel void programa98( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 98);      
}


__kernel void programa99( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 99);      
}


__kernel void programa100( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 / 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 100);      
}


__kernel void programa101( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 101);      
}


__kernel void programa102( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 102);      
}


__kernel void programa103( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 103);      
}


__kernel void programa104( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f / 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 104);      
}


__kernel void programa105( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 105);      
}


__kernel void programa106( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f - ( x1 * x1 ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 106);      
}


__kernel void programa107( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 107);      
}


__kernel void programa108( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 * 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 108);      
}


__kernel void programa109( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 109);      
}


__kernel void programa110( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 110);      
}


__kernel void programa111( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f * x1 ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 111);      
}


__kernel void programa112( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 112);      
}


__kernel void programa113( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 113);      
}


__kernel void programa114( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 114);      
}


__kernel void programa115( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 115);      
}


__kernel void programa116( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 116);      
}


__kernel void programa117( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 117);      
}


__kernel void programa118( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 + ( ( 1.000000f + 1.000000f ) * ( ( x1 - x1 ) + 1.000000f ) ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 118);      
}


__kernel void programa119( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f - ( 1.000000f - 1.000000f ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 119);      
}


__kernel void programa120( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 120);      
}


__kernel void programa121( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( ( ( 1.000000f * x1 ) / ( 1.000000f + 1.000000f ) ) - 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 121);      
}


__kernel void programa122( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( ( x1 - x1 ) - 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 122);      
}


__kernel void programa123( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( ( ( 1.000000f / x1 ) * ( x1 / x1 ) ) / 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 123);      
}


__kernel void programa124( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 124);      
}


__kernel void programa125( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 * 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 125);      
}


__kernel void programa126( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 126);      
}


__kernel void programa127( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 127);      
}


__kernel void programa128( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 128);      
}


__kernel void programa129( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f * ( 1.000000f * 1.000000f ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 129);      
}


__kernel void programa130( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 130);      
}


__kernel void programa131( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 131);      
}


__kernel void programa132( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 132);      
}


__kernel void programa133( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( ( ( 1.000000f / 1.000000f ) + x1 ) * 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 133);      
}


__kernel void programa134( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 - x1 ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 134);      
}


__kernel void programa135( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 135);      
}


__kernel void programa136( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 136);      
}


__kernel void programa137( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 - ( x1 + x1 ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 137);      
}


__kernel void programa138( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 138);      
}


__kernel void programa139( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 139);      
}


__kernel void programa140( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 140);      
}


__kernel void programa141( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( ( ( 1.000000f + x1 ) + 1.000000f ) / 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 141);      
}


__kernel void programa142( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 142);      
}


__kernel void programa143( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 143);      
}


__kernel void programa144( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 144);      
}


__kernel void programa145( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 145);      
}


__kernel void programa146( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 146);      
}


__kernel void programa147( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 147);      
}


__kernel void programa148( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 148);      
}


__kernel void programa149( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 149);      
}


__kernel void programa150( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 150);      
}


__kernel void programa151( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 151);      
}


__kernel void programa152( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 152);      
}


__kernel void programa153( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 153);      
}


__kernel void programa154( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( ( 1.000000f / ( ( 1.000000f - 1.000000f ) / 1.000000f ) ) / x1 ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 154);      
}


__kernel void programa155( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 155);      
}


__kernel void programa156( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 156);      
}


__kernel void programa157( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 - 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 157);      
}


__kernel void programa158( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 158);      
}


__kernel void programa159( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 159);      
}


__kernel void programa160( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 - 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 160);      
}


__kernel void programa161( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( ( 1.000000f - 1.000000f ) / ( ( x1 - 1.000000f ) + ( 1.000000f - x1 ) ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 161);      
}


__kernel void programa162( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 162);      
}


__kernel void programa163( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 163);      
}


__kernel void programa164( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f / ( x1 * 1.000000f ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 164);      
}


__kernel void programa165( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 - 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 165);      
}


__kernel void programa166( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( ( ( ( ( ( x1 * x1 ) / 1.000000f ) + x1 ) / x1 ) - ( x1 + ( x1 + ( ( 1.000000f - x1 ) / ( ( x1 + ( ( 1.000000f / x1 ) - ( x1 / ( 1.000000f + x1 ) ) ) ) - x1 ) ) ) ) ) - x1 ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 166);      
}


__kernel void programa167( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( x1 * x1 ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 167);      
}


__kernel void programa168( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 168);      
}


__kernel void programa169( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 169);      
}


__kernel void programa170( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 170);      
}


__kernel void programa171( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 171);      
}


__kernel void programa172( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 172);      
}


__kernel void programa173( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 173);      
}


__kernel void programa174( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 174);      
}


__kernel void programa175( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( ( 1.000000f * 1.000000f ) - 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 175);      
}


__kernel void programa176( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 176);      
}


__kernel void programa177( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 177);      
}


__kernel void programa178( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 178);      
}


__kernel void programa179( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 179);      
}


__kernel void programa180( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 180);      
}


__kernel void programa181( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( ( x1 - x1 ) - 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 181);      
}


__kernel void programa182( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 182);      
}


__kernel void programa183( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 183);      
}


__kernel void programa184( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 184);      
}


__kernel void programa185( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 185);      
}


__kernel void programa186( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 186);      
}


__kernel void programa187( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 187);      
}


__kernel void programa188( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 188);      
}


__kernel void programa189( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( ( 1.000000f - ( ( 1.000000f / ( ( ( ( ( x1 + 1.000000f ) / ( 1.000000f * 1.000000f ) ) - 1.000000f ) / 1.000000f ) * 1.000000f ) ) + x1 ) ) - 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 189);      
}


__kernel void programa190( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 190);      
}


__kernel void programa191( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( ( ( x1 / ( 1.000000f * 1.000000f ) ) * 1.000000f ) + x1 ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 191);      
}


__kernel void programa192( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f / 1.000000f ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 192);      
}


__kernel void programa193( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 193);      
}


__kernel void programa194( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 194);      
}


__kernel void programa195( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 195);      
}


__kernel void programa196( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 196);      
}


__kernel void programa197( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = ( 1.000000f * ( 1.000000f / ( x1 / 1.000000f ) ) ); 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 197);      
}


__kernel void programa198( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = 1.000000f; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 198);      
}


__kernel void programa199( 
    __global float * fitness,			
	__global float * dataBase, 
    __local float  * erros){ 
    int tid = get_global_id(0), 
   	    lid = get_local_id(0), 
   	    gid = get_group_id(0), 
        local_size = get_local_size(0); 
     //Avaliação paralela entre work-itens do mesmo work-group 
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter ) 
       { 
     uint line = iter * local_size + lid;	
     #else 
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter ) 
       { 
          uint line = iter * local_size + lid; 
          if( line < TAMANHO_DATABASE) 
          { 
     #endif 
            float result = x1; 
            float y = DATABASE(line, NUM_VARIAVEIS-1); 
            erros[lid] += pown(result-y, 2); 
     #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE 
          } 
      #endif 
      } 
      reducao_paralela(fitness, erros, gid, lid, 199);      
}

void reducao_paralela( __global float * fitness, __local float  * erros, uint gid, uint lid, const int offset){

    for(uint s = LOCAL_SIZE_ROUNDED_UP_TO_POWER_OF_2*0.5;s>0 ; s*=0.5){
        barrier(CLK_LOCAL_MEM_FENCE);

        #ifndef LOCAL_SIZE_IS_NOT_POWER_OF_2
            if(lid < s )
        #else
            if(lid < s && (lid + s < local_size ) )
        #endif		        
            erros[lid] += erros[lid+s];
    }	
   
    if(lid==0){

        if( isinf( erros[0] ) || isnan( erros[0] ) ) 
            erros[0] = MAXFLOAT;
       
        fitness[offset/*+gid*/] = erros[0]*(-1.0);
    }    
}

/*
__kernel void avaliacao_gpu(
			    __global float * fitness,			
         		__global float * dataBase,
	            __local float  * erros,
	            const int offset){
	
	int tid = get_global_id(0),
   	    lid = get_local_id(0),
   	    gid = get_group_id(0),
	    local_size = get_local_size(0);
	
     //Avaliação paralela entre work-itens do mesmo work-group
     #ifndef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE
       for( uint iter = 0; iter < TAMANHO_DATABASE/local_size; ++iter )
       {
	uint line = iter * local_size + lid;	
     #else
       for( uint iter = 0; iter < ceil( TAMANHO_DATABASE / (float) local_size ); ++iter )
       {
          uint line = iter * local_size + lid;
          if( line < TAMANHO_DATABASE)
          {
     #endif	                      
            float result = funcaoobjetivo(offset+gid, dataBase, line);
            float y = DATABASE(line, NUM_VARIAVEIS-1);

            erros[lid] += pown(result-y, 2);

      #ifdef NUM_POINTS_IS_NOT_DIVISIBLE_BY_LOCAL_SIZE
          }
      #endif
      }
      reducao_paralela(fitness, erros, gid, lid, offset);     
}*/

